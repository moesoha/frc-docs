# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-testing-with-smartdashboard.rst:2
msgid "Using SmartDashboard to Test a Command"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-testing-with-smartdashboard.rst:4
msgid ""
"Commands are easily tested by adding a button to the SmartDashboard to "
"trigger the command. In this way, no integration with the rest of the "
"robot program is necessary and commands can easily be independently "
"tested. This is the easiest way to verify commands since with a single "
"line of code in your program, a button can be created on the "
"SmartDashboard that will run the command. These buttons can then be left "
"in place to verify subsystems and command operations in the future."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-testing-with-smartdashboard.rst:6
msgid ""
"This has the added benefit of accommodating multiple programmers, each "
"writing commands. As the code is checked into the main robot project, the"
" commands can be individually tested."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-testing-with-smartdashboard.rst:9
msgid "Creating the Button on SmartDashboard"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-testing-with-smartdashboard.rst:13
msgid ""
"The button is created on the SmartDashboard by putting an instance of the"
" command from the robot program to the dashboard. This is such a common "
"operation that it has been added to RobotBuilder as a checkbox. When "
"writing your commands, be sure that the box is checked, and buttons will "
"be automatically generated for you."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-testing-with-smartdashboard.rst:16
msgid "Operating the Buttons"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-testing-with-smartdashboard.rst:20
msgid ""
"The buttons will be generated automatically and will appear on the "
"dashboard screen. You can put the SmartDashboard into edit mode, and the "
"buttons can then be rearranged along with other values that are being "
"generated. In this example there are a number of commands, each with an "
"associated button for testing. The button is labeled \"Start\" and "
"pressing it will run the command. As soon as it is pressed, the label "
"changes to \"Cancel\" and pressing it will interrupt the command causing "
"the ``Interrupted()`` method to be called."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-testing-with-smartdashboard.rst:23
msgid "Adding Commands Manually"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-testing-with-smartdashboard.rst:39
msgid ""
"Commands can be added to the SmartDashboard manually by writing the code "
"yourself. This is done by passing instances of the command to the PutData"
" method along with the name that should be associated with the button on "
"the SmartDashboard. These instances are scheduled whenever the button is "
"pressed. The result is exactly the same as RobotBuilder generated code, "
"although clicking the checkbox in RobotBuilder is much easier than "
"writing all the code by hand."
msgstr ""

