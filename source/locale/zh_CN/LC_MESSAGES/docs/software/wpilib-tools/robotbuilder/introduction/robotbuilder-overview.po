# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:2
msgid "RobotBuilder Overview"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:4
msgid ""
"Creating a program with RobotBuilder is a very straight forward procedure"
" by following a few steps that are the same for any robot. This lesson "
"describes the steps that you can follow. You can find more details about "
"each of these steps in subsequent sections of the document."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:6
msgid ""
"In addition to the text documentation provided here, a `series of videos "
"about RobotBuilder and many other FRC Robotics Engineering topics "
"<https://wp.wpi.edu/wpilib/robotics-videos/>`__ is also available."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:9
msgid "Divide the Robot into Subsystems"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:13
msgid ""
"Your robot is naturally made up of a number of smaller systems like the "
"drive trains, arms, shooters, collectors, manipulators, wrist joints, "
"etc. You should look at the design of your robot and break it up into "
"smaller, separately operated subsystems. In this particular example there"
" is an elevator, a minibot alignment device, a gripper, and a camera "
"system. In addition one might include the drive base. Each of these parts"
" of the robot are separately controlled and make good candidates for "
"subsystems."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:15
msgid "Todo"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:15
msgid "add link"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:17
msgid ""
"For more information see :doc:`Creating a Subsystem <robotbuilder-"
"creating-subsystem>`."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:20
msgid "Adding each Subsystem to the Project"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:24
msgid ""
"Each subsystem will be added to the \"Subsystems\" folder in the "
"RobotBuilder and given a meaningful name. For each of the subsystems "
"there are several attributes that get filled in to specify more "
"information about the subsystems. In addition there are two types of "
"subsystems that you might want to create:"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:26
msgid ""
"PIDSubsystems - often it is desirable to control a subsystems operation "
"with a PID controller. This is code in your program that makes the "
"subsystem element, for example arm angle, more quickly to a desired "
"position then stop when reaching it. PIDSubsystems have the PID "
"Controller code built-in and are often more convenient then adding it "
"yourself. PIDSubsystems have a sensor that determines when the device has"
" reached the target position and an actuator (speed controller) that is "
"driven to the setpoint."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:27
msgid ""
"Regular subsystem - these subsystems don't have an integrated PID "
"controller and are used for subsystems without PID control for feedback "
"or for subsystems requiring more complex control than can be handled with"
" the default embedded PID controller."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:29
msgid ""
"As you look through more of this documentation the differences between "
"the subsystem types will become more apparent."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:31
msgid ""
"For more information see :doc:`Creating a Subsystem <robotbuilder-"
"creating-subsystem>` and :ref:`Writing Code for a Subsystem "
"<docs/software/wpilib-tools/robotbuilder/writing-code/robotbuilder-"
"writing-subsystem-code:Writing the Code for a Subsystem>`."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:34
msgid "Adding Components to each of the Subsystems"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:38
msgid ""
"Each subsystem consists of a number of actuators, sensors and controllers"
" that it uses to perform its operations. These sensors and actuators are "
"added to the subsystem with which they are associated.  Each of the "
"sensors and actuators comes from the RobotBuilder palette and is dragged "
"to the appropriate subsystem. For each, there are usually other "
"properties that must be set such as port numbers and other parameters "
"specific to the component."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:40
msgid ""
"In this example there is an Elevator subsystem that uses a motor and a "
"potentiometer (motor and pot) that have been dragged to the Elevator "
"subsystem."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:43
msgid "Adding Commands That Describe Subsystem Goals"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:45
msgid ""
"Commands are distinct goals that the robot will perform. These commands "
"are added by dragging the command under the \"Commands\" folder. When "
"creating a command, there are 3 primary choices (shown on the palette on "
"the left of the picture):"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:47
msgid ""
"Normal commands - these are the most flexible command, you have to write "
"all of the code to perform the desired actions necessary to accomplish "
"the goal."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:48
msgid ""
"Command groups - these commands are a combination of other commands "
"running both in a sequential order and in parallel. Use these to build up"
" more complicated actions after you have a number of basic commands "
"implemented."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:49
msgid ""
"Setpoint commands - setpoint commands move a PID Subsystem to a fixed "
"setpoint, or the desired location."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:51
msgid ""
"For more information see :doc:`Creating a Command <robotbuilder-creating-"
"command>` and :ref:`Writing Command Code <docs/software/wpilib-"
"tools/robotbuilder/writing-code/robotbuilder-writing-command-code:Writing"
" the Code for a Command>`."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:54
msgid "Testing each Command"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:58
msgid ""
"Each command can be run from the SmartDashboard. This is useful for "
"testing commands before you add them to the operator interface or to a "
"command group. As long as you leave the \"Button on SmartDashboard\" "
"property checked, a button will be created on the SmartDashboard. When "
"you press the start button, the command will run and you can check that "
"it performs the desired action."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:60
msgid ""
"By creating buttons, each command can be tested individually. If all the "
"commands work individually, you can be pretty sure that the robot will "
"work as a whole."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:62
msgid ""
"For more information see :doc:`Testing with Smartdashboard <robotbuilder-"
"testing-with-smartdashboard>`."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:65
msgid "Adding Operator Interface Components"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:69
msgid ""
"The operator interface consists of joysticks, gamepads and other HID "
"input devices. You can add operator interface components (joysticks, "
"joystick buttons) to your program in RobotBuilder. It will automatically "
"generate code that will initialize all of the components and allow them "
"to be connected to commands."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:71
msgid ""
"The operator interface components are dragged from the palette to the "
"\"Operator Interface\" folder in the RobotBuilder program. First (1) add "
"Joysticks to the program then put buttons under the associated joysticks "
"(2) and give them meaningful names, like ShootButton."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:74
msgid "Connecting the Commands to the Operator Interface"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:78
msgid ""
"Commands can be associated with buttons so that when a button is pressed "
"the command is scheduled. This should, for the most part, handle most of "
"the tele-operated part of your robot program."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:80
msgid ""
"This is simply done by (1) adding the command to the JoystickButton "
"object in the RobotBuilder program, then (2) setting the condition in "
"which the command is scheduled."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:82
msgid ""
"For more information see :doc:`Connecting the Operator Interface to a "
"Command <robotbuilder-operator-interface-to-command>`."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:85
msgid "Developing Autonomous Commands"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:89
msgid ""
"Commands make it simple to develop autonomous programs. You simply "
"specify which command should run when the robot enters the autonomous "
"period and it will automatically be scheduled. If you have tested "
"commands as discussed above, this should simply be a matter of choosing "
"which command should run."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:91
msgid ""
"Select the robot at the root of the RobotBuilder project, then edit the "
"Autonomous Command property to choose the command to run. It's that "
"simple!"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:93
msgid ""
"For more information see :doc:`Setting the Default Autonomous Command "
"<robotbuilder-default-autonomous-command>`."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:96
msgid "Generating Code"
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:100
msgid ""
"At any point in the process outlined above you can have RobotBuilder "
"generate a C++ or Java program that will represent the project you have "
"created. This is done by specifying the location of the project in the "
"project properties (1), then clicking the appropriate toolbar button to "
"generate the code."
msgstr ""

#: ../../source/docs/software/wpilib-tools/robotbuilder/introduction/robotbuilder-overview.rst:102
msgid ""
"For more information see :ref:`Generating RobotBuilder Code "
"<docs/software/wpilib-tools/robotbuilder/writing-code/robotbuilder-"
"generating-code:Generating Code for a Project>`."
msgstr ""

