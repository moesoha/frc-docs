# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:2
msgid "Enabling Test mode (LiveWindow)"
msgstr ""

#: ../../source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:4
msgid ""
"You may add code to your program to display values for your sensors and "
"actuators while the robot is in Test mode. This can be selected from the "
"Driver Station whenever the robot is not on the field. The code to "
"display these values is automatically generated by RobotBuilder and is "
"described in the next article. Test mode is designed to verify the "
"correct operation of the sensors and actuators on a robot. In addition it"
" can be used for obtaining setpoints from sensors such as potentiometers "
"and for tuning PID loops in your code."
msgstr ""

#: ../../source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:7
msgid "Setting Test mode with the Driver Station"
msgstr ""

#: ../../source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:10
msgid ""
"Enable Test Mode in the Driver Station by clicking on the \"Test\" button"
" and setting \"Enable\" on the robot. When doing this, the SmartDashboard"
" display will switch to test mode (LiveWindow) and will display the "
"status of any actuators and sensors used by your program."
msgstr ""

#: ../../source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:13
msgid "Explicitly vs. implicit test mode display"
msgstr ""

#: ../../source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:16
msgid ""
"All sensors and actuators will automatically be displayed on the "
"SmartDashboard in test mode and will be named using the object type (such"
" as Jaguar, Analog, Victor, etc.) with the module number and channel "
"number with which the object was created. In addition, the program can "
"explicitly add sensors and actuators to the test mode display, in which "
"case programmer-defined subsystem and object names can be specified "
"making the program clearer. This example illustrates explicitly defining "
"those sensors and actuators in the highlighted code."
msgstr ""

#: ../../source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:19
msgid "Understanding what is displayed in Test mode"
msgstr ""

#: ../../source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:22
msgid ""
"This is the output in the SmartDashboard display when the robot is placed"
" into test mode. In the display shown above the objects listed as "
"Ungrouped were implicitly created by WPILib when the corresponding "
"objects were created. These objects are contained in a subsystem group "
"called \"Ungrouped\" **(1)** and are named with the device type (Analog, "
"Jaguar in this case), and the module and channel numbers. The objects "
"shown in the \"SomeSubsystem\" **(2)** group are explicitly created by "
"the programmer from the code example in the previous section. These are "
"named in the calls to ``LiveWindow.addActuator()`` and "
"``LiveWindow.AddSensor()``. Explicitly created sensors and actuators will"
" be grouped by the specified subsystem."
msgstr ""

