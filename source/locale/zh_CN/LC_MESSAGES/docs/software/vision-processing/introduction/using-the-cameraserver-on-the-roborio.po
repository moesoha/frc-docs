# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/vision-processing/introduction/using-the-cameraserver-on-the-roborio.rst:2
msgid "Using the CameraServer on the roboRIO"
msgstr ""

#: ../../source/docs/software/vision-processing/introduction/using-the-cameraserver-on-the-roborio.rst:5
msgid "Simple CameraServer Program"
msgstr ""

#: ../../source/docs/software/vision-processing/introduction/using-the-cameraserver-on-the-roborio.rst:7
msgid ""
"The following program starts automatic capture of a USB camera like the "
"Microsoft LifeCam that is connected to the roboRIO. In this mode, the "
"camera will capture frames and send them to the dashboard. To view the "
"images, create a CameraServer Stream Viewer widget using the \"View\", "
"then \"Add\" menu in the dashboard. The images are unprocessed and just "
"forwarded from the camera to the dashboard."
msgstr ""

#: ../../source/docs/software/vision-processing/introduction/using-the-cameraserver-on-the-roborio.rst:42
msgid "Advanced Camera Server Program"
msgstr ""

#: ../../source/docs/software/vision-processing/introduction/using-the-cameraserver-on-the-roborio.rst:44
msgid ""
"In the following example a thread created in robotInit() gets the Camera "
"Server instance. Each frame of the video is individually processed, in "
"this case converting a color image (BGR) to gray scale using the OpenCV "
"cvtColor() method. The resultant images are then passed to the output "
"stream and sent to the dashboard. You can replace the cvtColor operation "
"with any image processing code that is necessary for your application. "
"You can even annotate the image using OpenCV methods to write targeting "
"information onto the image being sent to the dashboard."
msgstr ""

#: ../../source/docs/software/vision-processing/introduction/using-the-cameraserver-on-the-roborio.rst:117
msgid ""
"Notice that in these examples, the ``PutVideo()`` method writes the video"
" to a named stream. To view that stream on Shuffleboard, select that "
"named stream. In this case that is \"Blur\" for the Java program and "
"\"Gray\" for the C++ sample."
msgstr ""

