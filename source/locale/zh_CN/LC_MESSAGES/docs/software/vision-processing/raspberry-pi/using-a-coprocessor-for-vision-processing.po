# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:2
msgid "Using a Coprocessor for vision processing"
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:3
msgid ""
"Vision processing using libraries like OpenCV for recognizing field "
"targets or game pieces can often be a CPU intensive process. Often the "
"load isn't too significant and the processing can easily be handled by "
"the roboRIO. In cases where there are more camera streams or the image "
"processing is complex, it is desirable to off-load the roboRIO by putting"
" the code and the camera connection on a different processor. There are a"
" number of choices of processors that are popular in FRC such as the "
"Raspberry PI, the intel-based Kangaroo, the LimeLight for the ultimate in"
" simplicity, or for more complex vision code a graphics accelerator such "
"as one of the nVidia Jetson models."
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:11
msgid "Strategy"
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:12
msgid ""
"Generally the idea is to set up the coprocessor with the required "
"software that generally includes:"
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:14
msgid "OpenCV - the open source computer vision library"
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:15
msgid ""
"Network tables - to commute the results of the image processing to the "
"roboRIO program"
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:16
msgid ""
"Camera server library - to handle the camera connections and publish "
"streams that can be viewed on a dashboard"
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:17
msgid ""
"The language library for whatever computer language is used for the "
"vision program"
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:18
msgid "The actual vision program that does the object detection"
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:20
msgid ""
"The coprocessor is connected to the roboRIO network by plugging it into "
"the extra ethernet port on the network router or, for more connections, "
"adding a small network switch to the robot. The cameras are plugged into "
"the coprocessor, it acquires the images, processes them, and publishes "
"the results, usually target location information, to network tables so it"
" is can be consumed by the robot program for steering and aiming."
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:28
msgid "Streaming camera data to the dashboard"
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:29
msgid ""
"It is often desirable to simply stream the camera data to the dashboard "
"over the robot network. In this case one or more camera connections can "
"be sent to the network and viewed on a dashboard such as Shuffleboard or "
"a web browser. Using Shuffleboard has the advantage of having easy "
"controls to set the camera resolution and bit rate as well as integrating"
" the camera streams with other data sent from the robot."
msgstr ""

#: ../../source/docs/software/vision-processing/raspberry-pi/using-a-coprocessor-for-vision-processing.rst:34
msgid ""
"It is also possible to process images and add annotation to the image, "
"such as target lines or boxes showing what the image processing code has "
"detected then send it forward to the dashboard to make it easier for "
"operators to see a clear picture of what's around the robot."
msgstr ""

