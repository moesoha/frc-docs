# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:2
msgid "PID control through PIDSubsystems and PIDCommands"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:4
msgid ""
"One of the most common control algorithms used in FRC is the `PID "
"controller <https://en.wikipedia.org/wiki/PID_controller>`__. WPILib "
"offers its own :code:`PIDController` class (`Java "
"<https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj/PIDController.html>`__,"
" `C++ "
"<https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc_1_1PIDController.html>`__)"
" to help teams implement this functionality on their robots. To further "
"help teams integrate PID control into a command-based robot project, the "
"command-based library includes several convenience wrappers for the "
"``PIDController`` object. There are two basic wrappers: PIDSubsystems, "
"which integrate the PID controller into a subsystem, and PIDCommands, "
"which integrate the PID controller into a command. Moreover, each wrapper"
" comes in one of two varieties: synchronous, which run from the main "
"robot loop, and asynchronous, which run in their own thread. While the "
"asynchronous versions offer more functionality and potentially tighter "
"control, new/inexperienced users are encouraged to use the synchronous "
"versions to avoid having to deal with thread safety issues."
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:20
msgid "PIDSubsystems"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:30
msgid ""
"The PIDSubsystem classes allow users to conveniently create a subsystem "
"with a built-in PIDController."
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:34
msgid "Creating a PIDSubsystem"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:36
msgid ""
"To create a PIDSubsystem, users should subclass one of the two "
"PIDSubsystem classes:"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:67
msgid ""
"Additional settings can be applied to the :code:`PIDController` (`Java "
"<https://first.wpi.edu/FRC/roborio/release/docs/java/edu/wpi/first/wpilibj/PIDController.html>`__,"
" `C++ "
"<https://first.wpi.edu/FRC/roborio/release/docs/cpp/classfrc_1_1PIDController.html>`__)"
" by calling the ``getController`` method from the constructor."
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:71
msgid "Using a PIDSubsystem"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:73
msgid ""
"What does a PIDSubsystem look like when used in practice? The following "
"examples are taken from the FrisbeeBot example project:"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:76
#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:219
msgid "Todo"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:76
msgid "Link to FrisbeeBot example after merge"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:139
msgid ""
"Notice that the ``disable()`` method has been overridden, even though the"
" superclass has an implementation - this is because the default "
"implementation (for both synchronous and asynchronous) calls "
"``useOutput(0);``, which may not necessarily set the motor output to zero"
" depending on the type of feedforward implemented by the user."
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:145
msgid "Using a PIDSubsystem with commands can be very simple:"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:158
msgid "PIDCommands"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:176
msgid ""
"The PIDCommand classes allow users to easily create commands with a "
"built-in PIDController."
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:180
msgid "Creating a PIDCommand"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:182
msgid ""
"As with PIDSubsystem, users can create a PIDCommmand by subclassing one "
"of the two PIDCommand classes."
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:201
msgid ""
"However, as with many of the other command classes in the command-based "
"library, users may want to save code by defining a PIDCommand "
":ref:`inline <inlined-commands>`:"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:214
msgid "Using a PIDCommand"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:216
msgid ""
"What does a PIDCommand look like when used in practice? The following "
"examples are from the GyroDriveCommands example project:"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:219
msgid "Link to GyroDriveCommands example after merge"
msgstr ""

#: ../../source/docs/software/commandbased/pid-subsystems-commands.rst:263
msgid "And, for an :ref:`inlined <inlined-commands>`  example:"
msgstr ""

