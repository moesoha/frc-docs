# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:4
msgid "Structuring a command-based robot project"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:6
msgid ""
"While users are free to use the command-based libraries however they like"
" (and advanced users are encouraged to do so), new users may want some "
"guidance on how to structure a basic command-based robot project."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:10
#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:39
#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:136
#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:213
msgid "Todo"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:10
msgid "Link below to example after merge."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:12
msgid ""
"A standard template for a command-based robot project is included in the "
"WPILib examples repository. This section will walk users through the "
"structure of this template."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:16
msgid "The root package generally will contain four classes:"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:18
msgid ""
"``Main.java``, which is the main robot application. New users *should "
"not* touch this class. ``Robot.java``, which is responsible for the main "
"control flow of the robot code. ``RobotContainer.java``, which holds "
"robot subsystems and commands, and is where most of the declarative robot"
" setup (e.g. button bindings) is performed. ``Constants.java``, which "
"holds globally-accessible constants to be used throughout the robot."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:26
msgid ""
"The root directory will also contain two sub-packages: ``Subsystems`` "
"contains all user-defined subsystem classes. ``Commands`` contains all "
"user-defined command classes."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:31
msgid "Robot.java"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:33
msgid ""
"As ``Robot.java`` is responsible for the program’s control flow, and "
"command-based is an imperative paradigm designed to minimize the amount "
"of attention the user has to pay to explicit program control flow, the "
"``Robot.java`` class of a command-based project should be mostly empty. "
"However, there are a few important things that must be included"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:39
msgid "Link to class on github after merge"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:54
msgid ""
"Firstly, notice that an instance of ``RobotContainer`` is constructed "
"during the ``robotInit()`` method - this is important, as most of the "
"declarative robot setup will be called from the ``RobotContainer`` "
"constructor."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:77
msgid ""
"Secondly, the inclusion of the ``CommandScheduler.getInstance().run()`` "
"call in the ``robotPeriodic()`` method is essential; without this call, "
"the scheduler will not execute any scheduled commands. Since "
"``TimedRobot`` runs with a default main loop frequency of 50Hz, this is "
"the frequency with which periodic command and subsystem methods will be "
"called. It is not recommended for new users to call this method from "
"anywhere else in their code."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:100
msgid ""
"Thirdly, notice that the ``autonomousInit()`` method schedules an "
"autonomous command returned by the ``RobotContainer`` instance. The logic"
" for selecting which autonomous command to run can be handled inside of "
"``RobotContainer``."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:118
msgid ""
"Finally, notice that the ``teleopInit()`` method cancels any still-"
"running autonomous commands. This is generally good practice."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:121
msgid ""
"Advanced users are free to add additional code to the various init and "
"periodic methods as they see fit; however, it should be noted that "
"including large amounts of imperative robot code in ``Robot.java`` is "
"contrary to the declarative design philosophy of the command-based "
"paradigm, and can result in confusingly-structured/disorganized code."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:128
msgid "RobotContainer.java"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:130
msgid ""
"This class is where most of the setup for your command-based robot will "
"take place. In this class, you will define your robot’s subsystems and "
"commands, bind those commands to triggering events (such as buttons), and"
" specify which command you will run in your autonomous routine. There are"
" a few aspects of this class new users may want explanations for:"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:136
msgid "link to class on github after merge"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:145
msgid ""
"Notice that subsystems are declared as private fields in "
"``RobotContainer``. This is in stark contrast to the previous incarnation"
" of the command-based framework, but is much more-aligned with agreed-"
"upon object-oriented best-practices. If subsystems are declared as global"
" variables, it allows the user to access them from anywhere in the code. "
"While this can make certain things easier (for example, there would be no"
" need to pass subsystems to commands in order for those commands to "
"access them), it makes the control flow of the program much harder to "
"keep track of as it is not immediately obvious which parts of the code "
"can change or be changed by which other parts of the code. This also "
"circumvents the ability of the resource-management system to do its job, "
"as ease-of-access makes it easy for users to accidentally make "
"conflicting calls to subsystem methods outside of the resource-managed "
"commands."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:175
msgid ""
"As mentioned before, the ``RobotContainer()`` constructor is where most "
"of the declarative setup for the robot should take place, including "
"button bindings, configuring autonomous selectors, etc. If the "
"constructor gets too “busy,” users are encouraged to migrate code into "
"separate subroutines (such as the ``configureButtonBindings()`` method "
"included by default) which are called from the constructor. Note that one"
" of the example autonomous commands has been :ref:`inlined <inlined-"
"commands>` for convenience. Note also that, since subsystems are declared"
" as private fields, they must be explicitly passed to commands."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:197
msgid ""
"Finally, the ``getAutonomousCommand()`` method provides a convenient way "
"for users to send their selected autonomous command to the main "
"``Robot.java`` class (which needs access to it to schedule it when "
"autonomous starts)."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:203
msgid "Constants.java"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:205
msgid ""
"The ``Constants.java`` class is where globally-accessible robot constants"
" (such as speeds, unit conversion factors, PID gains, and sensor/motor "
"ports) can be stored. It is recommended that users separate these "
"constants into individual inner classes corresponding to subsystems or "
"robot modes, to keep variable names shorter. All constants declared in "
"``Constants.java`` should be declared as ``public static final`` so that "
"they are globally accessible and cannot be changed."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:213
msgid "Link above to Constants.java and below to examples after merge"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:215
msgid ""
"For more illustrative examples of what a ``constants`` class should look "
"like in practice, see the various example projects."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:218
msgid ""
"It is recommended that the constants be used from other classes by "
"statically importing the necessary inner class. An ``import static`` "
"statement imports the static namespace of a class into the class in which"
" you are working, so that any ``static`` constants can be referenced "
"directly as if they had been defined in that class, e.g.:"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:228
msgid ""
"This can be seen in many of the examples used in this ScreenSteps guide, "
"as well as in the command-based example projects."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:232
msgid "Subsystems"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:234
msgid "User-defined subsystems should go in this package."
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:237
msgid "Commands"
msgstr ""

#: ../../source/docs/software/commandbased/structuring-command-based-project.rst:239
msgid "User-defined commands should go in this package."
msgstr ""

