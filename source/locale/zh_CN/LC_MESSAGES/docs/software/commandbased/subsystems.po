# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/commandbased/subsystems.rst:2
msgid "Subsystems"
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:4
msgid ""
"Subsystems are the basic unit of robot organization in the command-based "
"paradigm. A subsystem is an abstraction for a collection of robot "
"hardware that *operates together as a unit*. Subsystems `encapsulate "
"<https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)>`__ "
"this hardware, “hiding” it from the rest of the robot code (e.g. "
"commands) and restricting access to it except through the subsystem’s "
"public methods. Restricting the access in this way provides a single "
"convenient place for code that might otherwise be duplicated in multiple "
"places (such as scaling motor outputs or checking limit switches) if the "
"subsystem internals were exposed. It also allows changes to the specific "
"details of how the subsystem works (the “implementation”) to be isolated "
"from the rest of robot code, making it far easier to make substantial "
"changes if/when the design constraints change."
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:19
msgid ""
"Subsystems also serve as the backbone of the ``CommandScheduler``\\ ’s "
"resource management system. Commands may declare resource requirements by"
" specifying which subsystems they interact with; the scheduler will never"
" concurrently schedule more than one command that requires a given "
"subsystem. An attempt to schedule a command that requires a subsystem "
"that is already-in-use will either interrupt the currently-running "
"command (if the command has been scheduled as interruptible), or else be "
"ignored."
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:28
msgid ""
"Subsystems can be associated with “default commands” that will be "
"automatically scheduled when no other command is currently using the "
"subsystem. This is useful for continuous “background” actions such as "
"controlling the robot drive, or keeping an arm held at a setpoint. "
"Similar functionality can be achieved in the subsystem’s ``periodic()`` "
"method, which is run once per run of the scheduler; teams should try to "
"be consistent within their codebase about which functionality is achieved"
" through either of these methods."
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:38
msgid "Creating a subsystem"
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:40
msgid ""
"The recommended method to create a subsystem for most users is to "
"subclass the abstract ``SendableSubsystemBase`` class:"
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:51
msgid ""
"This class contains a few convenience features on top of the basic "
"``Subsystem`` interface: it automatically calls the ``register()`` method"
" in its constructor to register the subsystem with the scheduler (this is"
" necessary for the ``periodic()`` method to be called when the scheduler "
"runs), and also implements the ``Sendable`` interface so that it can be "
"sent to the dashboard to display/log relevant status information."
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:59
msgid ""
"This is not required, however; advanced users seeking more flexibility "
"are able to simply create a class that implements the ``Subsystem`` "
"interface:"
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:76
msgid "Simple subsystem example"
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:78
msgid "Todo"
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:78
msgid "link to Hatchbot after new command merge"
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:80
msgid ""
"What might a functional subsystem look like in practice? Below is a "
"simple pneumatically-actuated hatch mechanism from the HatchBot example "
"project:"
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:117
msgid ""
"Notice that the subsystem hides the presence of the DoubleSolenoid from "
"outside code (it is declared ``private``), and instead publicly exposes "
"two higher-level, descriptive robot actions: ``grabHatch()`` and "
"``releaseHatch()``. It is extremely important that “implementation "
"details” such as the double solenoid be “hidden” in this manner; this "
"ensures that code outside the subsystem will never cause the solenoid to "
"be in an unexpected state. It also allows the user to change the "
"implementation (for instance, a motor could be used instead of a "
"pneumatic) without any of the code outside of the subsystem having to "
"change with it."
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:129
msgid "Setting default commands"
msgstr ""

#: ../../source/docs/software/commandbased/subsystems.rst:131
msgid ""
"Setting a default command for a subsystem is very easy; one simply calls "
"``Scheduler.getInstance().setDefaultCommand()``, or, more simply, the "
"``setDefaultCommand()`` method of the ``Subsystem`` interface:"
msgstr ""

