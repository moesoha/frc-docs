# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/commandbased/commands.rst:2
msgid "Commands"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:4
msgid ""
"Commands are simple state machines that perform high-level robot "
"functions using the methods defined by subsystems. Commands can be either"
" idle, in which they do nothing, or scheduled, in which the scheduler "
"will execute a specific set of the command’s code depending on the state "
"of the command. The ``CommandScheduler`` recognizes scheduled commands as"
" being in one of three states: initializing, executing, or ending. "
"Commands specify what is done in each of these states through the "
"``initialize()``, ``execute()`` and ``end()`` methods."
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:14
msgid "Creating commands"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:16
msgid ""
"Similarly to subsystems, the recommended method for most users to create "
"a command is to subclass the abstract ``SendableCommandBase`` class:"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:27
msgid ""
"As before, this contains several convenience features. It automatically "
"overrides the ``getRequirements()`` method for users, returning a list of"
" requirements that is empty by default, but can be added to with the "
"``addRequirements()`` method. It also implements the ``Sendable`` "
"interface, and so can be sent to the dashboard - this provides a handy "
"way for scheduling commands for testing (via a button on the dashboard) "
"without needing to bind them to buttons on a controller."
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:35
msgid ""
"Also as before, advanced users seeking more flexibility are free to "
"simply create their own class implementing the ``Command`` interface:"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:56
msgid "The structure of a command"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:58
msgid ""
"While subsystems are fairly freeform, and may generally look like "
"whatever the user wishes them to, commands are quite a bit more "
"constrained. Command code must specify what the command will do in each "
"of its possible states. This is done by overriding the ``initialize()``, "
"``execute()``, and ``end()`` methods. Additionally, a command must be "
"able to tell the scheduler when (if ever) it has finished execution - "
"this is done by overriding the ``isFinished()`` method. All of these "
"methods are defaulted to reduce clutter in user code: ``initialize()``, "
"``execute()``, and ``end()`` are defaulted to simply do nothing, while "
"``isFinished()`` is defaulted to return false (resulting in a command "
"that never ends)."
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:71
msgid "Initialization"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:80
msgid ""
"The ``initialize()`` method is run exactly once per time a command is "
"scheduled, as part of the scheduler’s ``schedule()`` method. The "
"scheduler’s ``run()`` method does not need to be called for the "
"``initialize()`` method to run. The initialize block should be used to "
"place the command in a known starting state for execution. It is also "
"useful for performing tasks that only need to be performed once per time "
"scheduled, such as setting motors to run at a constant speed or setting "
"the state of a solenoid actuator."
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:90
msgid "Execution"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:99
msgid ""
"The ``execute()`` method is called repeatedly while the command is "
"scheduled, whenever the scheduler’s ``run()`` method is called (this is "
"generally done in the main robot periodic method, which runs every 20ms "
"by default). The execute block should be used for any task that needs to "
"be done continually while the command is scheduled, such as updating "
"motor outputs to match joystick inputs, or using the output of a control "
"loop."
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:108
msgid "Ending"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:121
msgid ""
"The ``end()`` method of the command is called once when the command ends,"
" whether it finishes normally (i.e. ``isFinished()`` returned true) or it"
" was interrupted (either by another command or by being explicitly "
"canceled). The method argument specifies the manner in which the command "
"ended; users can use this to differentiate the behavior of their command "
"end accordingly. The end block should be used to “wrap up” command state "
"in a neat way, such as setting motors back to zero or reverting a "
"solenoid actuator to a “default” state."
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:131
msgid "Specifying end conditions"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:142
msgid ""
"Just like ``execute()``, the ``isFinished()`` method of the command is "
"called repeatedly, whenever the scheduler’s ``run()`` method is called. "
"As soon as it returns true, the command’s ``end()`` method is called and "
"it is un-scheduled. The ``isFinished()`` method is called *after* the "
"``execute()`` method, so the command *will* execute once on the same "
"iteration that it is un-scheduled."
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:150
msgid "Simple command example"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:152
msgid ""
"What might a functional command look like in practice? As before, below "
"is a simple command from the HatchBot example project that uses the "
"``HatchSubsystem`` introduced in the previous section:"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:189
msgid ""
"Notice that the hatch subsystem used by the command is passed into the "
"command through the command’s constructor. This is a pattern called "
"`dependency injection "
"<https://en.wikipedia.org/wiki/Dependency_injection>`__, and allows users"
" to avoid declaring their subsystems as global variables. This is widely "
"accepted as a best-practice - the reasoning behind this is discussed in a"
" :ref:`later section <structuring>`."
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:198
msgid ""
"Notice also that the above command calls the subsystem method once from "
"initialize, and then immediately ends (as ``isFinished()`` simply returns"
" true). This is typical for commands that toggle the states of "
"subsystems, and in fact the command-based library includes code to make "
":ref:`commands like this <instant-command>` even more succinctly."
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:204
msgid ""
"What about a more complicated case? Below is a drive command, from the "
"same example project:"
msgstr ""

#: ../../source/docs/software/commandbased/commands.rst:240
msgid ""
"Notice that this command does not override ``isFinished()``, and thus "
"will never end; this is the norm for commands that are intended to be "
"used as default commands (and, as can be guessed, the library includes "
"tools to make :ref:`this kind of command <run-command>` easier to write, "
"too!)."
msgstr ""

