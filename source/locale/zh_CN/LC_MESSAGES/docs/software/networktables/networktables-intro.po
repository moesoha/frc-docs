# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/networktables/networktables-intro.rst:2
msgid "What is NetworkTables"
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:4
msgid ""
"NetworkTables is an implementation of a distributed \"dictionary\". That "
"is named values are created either on the robot, driver station, or "
"potentially an attached coprocessor, and the values are automatically "
"distributed to all the other participants. For example, a driver station "
"laptop might receive camera images over the network, perform some vision "
"processing algorithm, and come up with some values to sent back to the "
"robot. The values might be an X, Y, and Distance. By writing these "
"results to NetworkTable values called \"X\", \"Y\", and \"Distance\" they"
" can be read by the robot shortly after being written. Then the robot can"
" act upon them."
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:6
msgid ""
"NetworkTables can be used by programs on the robot in either C++, Java or"
" LabVIEW and is built into each version of WPILib."
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:9
msgid "Network tables organization"
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:11
msgid ""
"Data is organized in NetworkTables in a hierarchy much like a directory "
"on disk with folders and files. For any instance of NetworkTables there "
"can be multiple values and subtables that may be nested in whatever way "
"fits the data organization desired. Subtables actually are represented as"
" a long key with slashes (/) separating the nested subtable and value key"
" names. Each value has a key associated with it that is used to retrieve "
"the value. For example, you might have a table called **datatable** as "
"shown in the following examples. Within a **datatable** there are two "
"keys, X and Y and their associated values. The OutlineViewer is a good "
"utility for exploring the values stored in NetworkTables while a program "
"is running."
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:13
msgid ""
"Data types for NetworkTables are either boolean, numeric, or string. "
"Numeric values are written as double precision values. In addition you "
"can have arrays of any of those types to ensure that multiple data items "
"are delivered consistently. There is also the option of storing raw data "
"which can be used for representing structured data."
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:15
msgid ""
"There are some default tables that are created automatically when the "
"program starts up:"
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:18
msgid "Table name"
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:18
msgid "Use"
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:20
msgid "/SmartDashboa rd"
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:20
msgid ""
"Used to store values written to the SmartDashboar d or Shuffleboard using"
" the ``SmartDashbo ard.put()`` set of methods."
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:34
msgid "/LiveWindow"
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:34
msgid ""
"Used to store Test mode (Test on the Driver Station) values. Typically "
"these are Subsystems and the associated sensors and actuators."
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:48
msgid "/FMSInfo"
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:48
msgid ""
"Information about the currently running match that comes from the Driver "
"Station and the Field Management System."
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:62
msgid "Writing a simple NetworkTable program"
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:64
msgid ""
"The NetworkTables classes are instantiated automatically when your "
"program starts. To access the instance of NetworkTables do call methods "
"to read and write the getDefault() method can be used to get the default "
"instance."
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:145
msgid ""
"The values for X and Y can be easily viewed using the OutlineViewer "
"program that shows the NetworkTables hierarchy and all the values "
"associated with each key."
msgstr ""

#: ../../source/docs/software/networktables/networktables-intro.rst:147
msgid ""
"Actually network tables has a flat namespace for the keys. Having tables "
"and subtables is an abstraction to make it easier to organize your data. "
"So for a table called \"SmartDashboard\" and a key named \"xValue\", it "
"is really a single key called \"/SmartDashboard/xValue\". The hierarchy "
"is not actually represented in the distributed data, only keys with "
"prefixes that are the contained table."
msgstr ""

