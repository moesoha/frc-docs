# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/networktables/multiple-instances.rst:2
msgid "Creating multiple instances of NetworkTables"
msgstr ""

#: ../../source/docs/software/networktables/multiple-instances.rst:3
msgid ""
"This feature is mainly useful for coprocessors and unit testing. It "
"allows a single program to be a member of two completely independent "
"Networktables \"networks\" that contain completely different (and "
"unrelated) sets of tables. For most general usage, you should use tables "
"within the single instance, as all current dashboard programs can only "
"connect to a single NT server at a time."
msgstr ""

#: ../../source/docs/software/networktables/multiple-instances.rst:5
msgid ""
"Normally the \"default\" instance is set up on the robot as a server, and"
" used for communication with the dashboard program running on your driver"
" station computer. This is what the SmartDashboard and LiveWindow classes"
" use."
msgstr ""

#: ../../source/docs/software/networktables/multiple-instances.rst:7
msgid ""
"If you had a coprocessor and wanted to have a set of tables that's shared"
" only between the coprocessor and the robot, you could set up a separate "
"instance in the robot code that acts as a client (or a server) and "
"connect the coprocessor to it, and those tables will NOT be sent to the "
"dashboard."
msgstr ""

#: ../../source/docs/software/networktables/multiple-instances.rst:9
msgid ""
"Similarly, if you wanted to do unit testing of your robot program's NT "
"communications, you could set up your unit tests such that they create a "
"separate client instance (still within the same program) and have it "
"connect to the server instance that the main robot code is running."
msgstr ""

#: ../../source/docs/software/networktables/multiple-instances.rst:11
msgid ""
"Another example might be having two completely separate dashboard "
"programs. You could set up two networktables server instances in your "
"robot program (on different TCP ports of course), set up different tables"
" on each one, and have each dashboard connect to a different server "
"instance. Each dashboard would only see the tables on its instance."
msgstr ""

