# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:2
msgid "Converting a Simple Autonomous Program to Command-Based"
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:4
msgid ""
"This documentation describes the use of the legacy command-based library,"
" which has been deprecated. While this documentation has been preserved "
"to help teams that have yet to do so, teams are strongly encouraged to "
"migrate to the :ref:`new command-based library "
"<docs/software/commandbased/index:Command-Based Programming>`."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:6
msgid ""
"This document describes how to rewrite a simple autonomous into a command"
" based autonomous. Hopefully, going through this process will help those "
"more familiar with the older simple autonomous method understand the "
"command based method better. By re-writing it as a command based program,"
" there are several benefits in terms of testing and reuse. For this "
"example, all of the logic is abstracted out into functions primarily so "
"that the focus of this example can be on the structure."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:9
msgid "Initial Autonomous Code"
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:63
msgid ""
"The code above aims a shooter, then it spins up a wheel and, finally, "
"once the wheel is running at the desired speed, it shoots the frisbee. "
"The code consists of three distinct actions: aim, spin up to speed and "
"shoot the Frisbee. The first two actions follow a command pattern that "
"consists of four parts:"
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:65
msgid "Initialization: prepares for the action to be performed."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:66
msgid "Condition: keeps the loop going while it is satisfied."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:67
msgid "Execution: repeatedly updates the code to try to make the condition false."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:68
msgid ""
"End: performs any cleanup and final task before moving on to the next "
"action."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:70
msgid ""
"The last action only has an explicit initialize, though depending on how "
"you read it, it can implicitly end under a number of conditions. The most"
" obvious one two in this case are when it's done shooting or when "
"autonomous has ended."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:73
msgid "Rewriting it as Commands"
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:99
msgid ""
"The same code can be rewritten as a ``CommandGroup`` that groups the "
"three actions, where each action is written as it's own command. First, "
"the command group will be written, then the commands will be written to "
"accomplish the three actions. This code is pretty straightforward. It "
"does the three actions sequentially, that is one after the other. Line 3 "
"aims the robot, then line 4 spins the shooter up and, finally, line 5 "
"actually shoots the frisbee. The ``addSequential()`` method sets it so "
"that these commands run one after the other."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:102
msgid "The Aim Command"
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:180
msgid ""
"As you can see, the command reflects the four parts of the action we "
"discussed earlier. It also has the ``interrupted()`` method which will be"
" discussed below. The other significant difference is that the condition "
"in the ``isFinished()`` is the opposite of what you would put as the "
"condition of the while loop, it returns true when you want to stop "
"running the execute method as opposed to false. Initializing, executing "
"and ending are exactly the same, they just go within their respective "
"method to indicate what they do."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:183
msgid "SpinUpShooter Command"
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:262
msgid ""
"The spin up shooter command is very similar to the Aim command, it's the "
"same basic idea."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:265
msgid "Shoot Command"
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:341
msgid ""
"The shoot command is the same basic transformation yet again, however it "
"is set to end immediately. In CommandBased programming, it is better to "
"have it's isFinished method return true when the act of shooting is "
"finished, but this is a more direct translation of the original code."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:344
msgid "Benefits of Command-Based"
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:346
msgid ""
"Why bother re-writing the code as CommandBased? Writing the code in the "
"CommandBased style offers a number of benefits:"
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:348
msgid ""
"**Re-Usability** - You can reuse the same command in teleop and multiple "
"autonomous modes. They all reference the same code, so if you need to "
"tweak it to tune it or fix it, you can do it in one place without having "
"to make the same edits in multiple places."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:349
msgid ""
"**Testability** - You can test each part using tools such as the "
"ShuffleBoard to test parts of the autonomous. Once you put them together,"
" you'll have more confidence that each piece works as desired."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:350
msgid ""
"**Parallelization** - If you wanted this code to aim and spin up the "
"shooter at the same time, it's trivial with CommandBased programming. "
"Just use ``AddParallel()`` instead of ``AddSequential()`` when adding the"
" Aim command and now aiming and spinning up will happen simultaneously."
msgstr ""

#: ../../source/docs/software/old-commandbased/basics/convert-simple-auto-command-auto.rst:351
msgid ""
"**Interruptibility** - Commands are interruptible, this provides the "
"ability to exit a command early, a task that is much harder in the "
"equivalent while loop based code."
msgstr ""

