# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, FIRST
# This file is distributed under the same license as the FIRST Robotics
# Competition package.
# Soha Jin <soha@lohu.info>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2019\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-23 22:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/software/old-commandbased/subsystems/simple-subsystems.rst:2
msgid "Simple Subsystems"
msgstr ""

#: ../../source/docs/software/old-commandbased/subsystems/simple-subsystems.rst:4
msgid ""
"This documentation describes the use of the legacy command-based library,"
" which has been deprecated. While this documentation has been preserved "
"to help teams that have yet to do so, teams are strongly encouraged to "
"migrate to the :ref:`new command-based library "
"<docs/software/commandbased/index:Command-Based Programming>`."
msgstr ""

#: ../../source/docs/software/old-commandbased/subsystems/simple-subsystems.rst:6
msgid ""
"Subsystems are the parts of your robot that are independently controlled "
"like collectors, shooters, drive bases, elevators, arms, wrists, "
"grippers, etc. Each subsystem is coded as an instance of the Subsystem "
"class. Subsystems should have methods that define the operation of the "
"actuators and sensors but not more complex behavior that happens over "
"time."
msgstr ""

#: ../../source/docs/software/old-commandbased/subsystems/simple-subsystems.rst:9
msgid "Creating a Subsystem"
msgstr ""

#: ../../source/docs/software/old-commandbased/subsystems/simple-subsystems.rst:103
msgid ""
"This is an example of a fairly straightforward subsystem that operates a "
"claw on a robot. The claw mechanism has a single motor to open or close "
"the claw and no sensors (not necessarily a good idea in practice, but "
"works for the example). The idea is that the open and close operations "
"are simply timed. There are three methods, open(), close(), and stop() "
"that operate the claw motor. Notice that there is not specific code that "
"actually checks if the claw is opened or closed. The open method gets the"
" claw moving in the open direction and the close method gets the claw "
"moving in the close direction. Use a command to control the timing of "
"this operation to make sure that the claw opens and closes for a specific"
" period of time."
msgstr ""

#: ../../source/docs/software/old-commandbased/subsystems/simple-subsystems.rst:106
msgid "Operating the Claw with a Command"
msgstr ""

#: ../../source/docs/software/old-commandbased/subsystems/simple-subsystems.rst:164
msgid ""
"Commands provide the timing of the subsystems operations. Each command "
"would do a different operation with the subsystem, the Claw in this case."
" The commands provides the timing for opening or closing. Here is an "
"example of a simple Command that controls the opening of the claw.  "
"Notice that a timeout is set for this command (0.9 seconds) to time the "
"opening of the claw and a check for the time in the isFinished() method. "
"You can find more details in the article about :doc:`using commands "
"<../commands/creating-simple-commands>`."
msgstr ""

